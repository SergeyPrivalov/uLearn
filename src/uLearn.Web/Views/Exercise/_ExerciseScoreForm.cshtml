@model uLearn.Web.Controllers.ExerciseScoreFormModel

@{
	var block = Model.Slide.Exercise;
}

<div class="exercise__add-review" style="display: none"
	data-url="@Url.Action("AddExerciseCodeReview", "Exercise", new { courseId = Model.CourseId, checkingId = Model.Checking.Id })">
	<div class="row">
		<h4 class="col-xs-12">
			Добавить комментарий
			<a class="exercise__close-review pull-right no-underline" href="#">&times;</a>
		</h4>

	</div>
	<div class="row">
		<div class="col-sm-6">
			<textarea class="exercise__add-review__comment"></textarea>
			<span class="markdown-formatting-helper with-long-tooltip cursor-pointer" data-toggle="tooltip" data-placement="bottom" title="**жирный текст**, __курсивный текст__, `код`, ```многострочный код```">
                <span class="fa fa-question-circle"></span>
				Работает форматирование
			</span>
			<button class="exercise__add-review__button btn btn-success btn-sm mt10">Сохранить (Ctrl+Enter)</button> 
		</div>
		<div class="col-sm-6 exercise__add-review__top-comments">
			<b>Популярные комментарии</b>

		</div>
	</div>
</div>

<div class="row">
	<div class="col-xs-12 col-md-6">
		<form method="POST" action="@Url.Action("ScoreExercise", "Exercise", new { recheck = Model.Checking.IsChecked })"
			class="exercise__score-form" data-submission-id="@Model.Checking.Submission.Id"
			style="@(Model.IsCurrentSubmissionChecking ? "" : "display: none")">
			<div class="text-muted">Выделите участок кода, чтобы оставить комментарий</div>	

			<input type="hidden" name="id" value="@Model.Checking.Id"/>
			<input type="hidden" name="errorUrl" value="@Url.RouteUrl("Course.SlideById", new { Model.CourseId, slideId = Model.Slide.Url, CheckQueueItemId = Model.Checking.Id, group = Model.GroupsIdsJoined })&amp;error="/>
			<input type="hidden" name="nextUrl" value="@Url.Action("ManualExerciseCheckingQueue", "Admin", new { Model.CourseId, group = Model.GroupsIdsJoined, done = Model.Checking.IsChecked })"/>

			@if (Model.Checking.IsLocked && !Model.Checking.IsLockedBy(User.Identity))
			{
				<div class="alert alert-danger mt10 ">Внимание. Эта работа прямо сейчас проверяется преподавателем @Model.Checking.LockedBy.VisibleName</div>
			}

			<h4>Оцените работу (максимальный балл @block.MaxReviewScore)</h4>
			<div class="exercise__score">
				<div class="btn-group" role="group">
					@{
						var isPercentScoreActive = false;
					}
					@foreach (var scorePercent in new[] { 0, 25, 50, 75, 100 })
					{
						var score = block.MaxReviewScore * scorePercent / 100;
						/* For max review score < 4 we can not define percentage score,
                         * because they are the same (0% of 2 is equal to 25% of 2)
                         */
						var isActive = Model.Checking.IsChecked && Model.Checking.Score == score && block.MaxReviewScore >= 4;
						isPercentScoreActive = isPercentScoreActive || isActive;
						<button type="button" class="btn btn-default @(isActive ? "active" : "")" data-value="@score">@scorePercent%</button>
					}
				</div>
				<div class="ib">
					@{
						var displayOtherScoreInput = Model.Checking.IsChecked && !isPercentScoreActive;
						var otherScoreInputDisplayProperty = displayOtherScoreInput ? "" : "display: none";
					}
                    <a href="#" class="exercise__other-score-link internal-page-link @(displayOtherScoreInput ? "" : "active")">Другая оценка</a>
					<input type="number" class="form-control" style="@otherScoreInputDisplayProperty" min="0" max="@block.MaxReviewScore" name="exerciseScore" required="required"
							value="@(Model.Checking.IsChecked ? Model.Checking.Score.ToString() : "")"/>
				</div>
			</div>

            @{
                // ReSharper disable ReplaceWithSingleAssignment.True
	            var prohibitFutherReview = true;
	            if (Model.Checking.IsChecked && !Model.Checking.ProhibitFurtherManualCheckings)
	            {
		            prohibitFutherReview = false;
	            }
                if (!Model.Checking.IsChecked && !Model.DefaultProhibitFutherReview)
	            {
		            prohibitFutherReview = false;
	            }
	            // ReSharper restore ReplaceWithSingleAssignment.True
            }
            
            <div class="checkbox checkbox-default">
				<input data-val="true" id="prohibitFurtherReview" name="prohibitFurtherReview" type="checkbox" value="true" @(prohibitFutherReview ? "checked" : "")/>
				<label for="prohibitFurtherReview">
					Не принимать больше код-ревью у этого студента
				</label>
			</div>

			<input type="submit" class="btn @(Model.Checking.IsChecked ? "btn-primary" : "btn-default")" value="Сохранить и вернуться"/>

			@if (!Model.Checking.IsChecked)
			{
				<input type="submit" class="btn btn-primary" value="Сохранить и перейти к следующему"
						data-url="@Url.Action("CheckNextExerciseForSlide", "Admin", new { Model.CourseId, slideId = Model.Slide.Id, group = Model.GroupsIdsJoined })"
						onclick="$('[name=nextUrl]').val($(this).data('url'))"/>
			}
		</form>
	</div>
</div>