@using System.Web.Mvc.Html
@using Database.Models
@using Microsoft.AspNet.Identity
@using uLearn
@using uLearn.Web.Controllers
@using uLearn.Web.Views.Shared
@using Ulearn.Common.Extensions

@model SlideCommentsModel

@functions
{

	private CommentViewModel BuildCommentViewModel(Comment comment, Slide slide)
	{
		var replies = Model.CommentsByParent.GetOrDefault(comment.Id, new List<Comment>()).OrderByDescending(x => x.IsApproved).ThenBy(x => x.PublishTime);
		var isAuthor = comment.AuthorId == User.Identity.GetUserId();
		return new CommentViewModel
		{
			Comment = comment,
			LikesCount = Model.CommentsLikesCounts.GetOrDefault(comment.Id),
			IsLikedByUser = Model.CommentsLikedByUser.Contains(comment.Id),
			Replies = replies.Select(r => BuildCommentViewModel(r, slide)),
			CanReply = Model.CanReply,
			CanModerateComment = Model.CanModerateComments,
			IsCommentVisibleForUser = comment.IsApproved || Model.CanSeeNotApprovedComments || isAuthor,
			CanEditAndDeleteComment = Model.CanModerateComments || isAuthor,
			CanViewAuthorSubmissions = slide is ExerciseSlide && Model.CanViewAuthorSubmissions,
			CurrentUser = Model.CurrentUser,
			CanViewAuthorProfile = Model.CanViewAuthorProfiles,
		};
	}

}

@helper TopLevelReplyForm()
{
	<div class="reply-form media">
		@using (Html.BeginForm("AddComment", "Comments", FormMethod.Post))
		{
			@Html.Hidden("courseId", Model.CourseId)
			@Html.Hidden("slideId", Model.Slide.Id)
			<div class="pull-left">
				@UserAvatar.SmallAvatar(Model.CurrentUser)
			</div>
			<div class="media-body">
				@Html.TextArea("commentText", "", new { placeholder = "Комментировать.." })
				<button class="reply-form__send-button btn btn-primary" disabled="disabled">Отправить</button>
			</div>
		}
	</div>
}

@* Used for ajax in addAntiForgeryToken() *@
<form id="__AjaxAntiForgeryForm" action="#" method="post">@Html.AntiForgeryToken()</form>

@if (Model.TopLevelComments.Any() || Model.IsAuthorizedAndCanComment)
{
	<div class="comments">
		<h3>Комментарии</h3>
		@foreach (var topLevelComment in Model.TopLevelComments)
		{
			@Html.Partial("_Comment", BuildCommentViewModel(topLevelComment, Model.Slide))
		}

		@if (Model.IsAuthorizedAndCanComment)
		{
			@TopLevelReplyForm()
		}
		else if (Model.CommentsPolicy.IsCommentsEnabled)
		{
			<div class="comments_policy__message gray">
                @Html.ActionLink("Войдите", "Login", "Account", new { returnUrl = Request.RawUrl }, new { }), чтобы оставить комментарий 
			</div>
		}
		else
		{
			<div class="comments_policy__message gray">
				Только преподаватели могут оставлять комментарии
			</div>
		}
	</div>
}
else
{
	if (Model.CommentsPolicy.IsCommentsEnabled)
	{
		<div class="comments">
            <h3>Комментарии</h3>
            <div class="comments_policy__message">
                Комментариев пока нет. @Html.ActionLink("Войдите", "Login", "Account", new { returnUrl = Request.RawUrl }, new { }), чтобы написать свой.
            </div>
        </div>
	}
}

<div class="comments__rules alert alert-warning">
	<div>
		Работает форматирование: <b>**жирный текст**</b>, <i>__курсивный текст__</i>, <span class="inline-pre">`код`</span>, <span class="inline-pre">```многострочный код```</span>.
	</div>
	@if (Model.Slide is ExerciseSlide)
	{
		<div class="comments__rules__good-tone">
			Простые правила хороших комментариев:
			<ul>
				<li>Используйте подсказки перед тем, как задать вопрос в комментариях.</li>
				<li>Воздержитесь от вопросов «Почему у меня не работает?». Отлаживайте, экспериментируйте, думайте!</li>
				<li>Пожалуйста, не публикуйте свои решения.</li>
				<li>
					Мы будем благодарны вам за доброжелательный тон в комментариях.
				</li>
			</ul>
		</div>
	}
</div>
